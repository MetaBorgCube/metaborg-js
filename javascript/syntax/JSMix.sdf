module JSMix[E]

imports

  javascript
  js/Expression [String => JSString]

exports

  lexical syntax

    [0-9]* -> MetaVarSuffix
    "_" [A-Za-z0-9\_\-]+ -> MetaVarSuffix
    
      
  context-free syntax
    "js-ex"  "|[" Expression "]|" -> E {cons("ToMetaExpr")}
    "js-ex*"  "|[" Expression* "]|" -> E {cons("ToMetaExpr")}
    "js-exp"  "|[" Expression "]|" -> E {cons("ToMetaExpr")}
    "js-exp*"  "|[" Expression* "]|" -> E {cons("ToMetaExpr")}
    "js-stmt"  "|[" Statement "]|" -> E {cons("ToMetaExpr")}
    "js-stmt*"  "|[" Statement* "]|" -> E {cons("ToMetaExpr")}
    "js-methoddecl" "|[" MethodDecl "]|" -> E {cons("ToMetaExpr")}
    "js-methoddecl*" "|[" MethodDecl* "]|" -> E {cons("ToMetaExpr")}
    "js-program" "|[" Start "]|" -> E {cons("ToMetaExpr")}
    "js-prop" "|[" ObjectProperty "]|" -> E {cons("ToMetaExpr")}
    "js-prop*" "|[" {ObjectProperty ","}* "]|" -> E {cons("ToMetaExpr")}
    
  variables
    "exp"   [0-9\']*           -> Expression {prefer}
    "exp_"  [A-Za-z0-9\']+     -> Expression {prefer}
 	  "exp"   [0-9\']* "*"       -> {Expression ","}* {prefer}
	  "exp_"  [A-Za-z0-9\']+ "*" -> {Expression ","}* {prefer}
    "stmt"   [0-9\']*           -> Statement {prefer}
    "stmt_"  [A-Za-z0-9\']+     -> Statement {prefer}
 	  "stmt"   [0-9\']* "*"       -> Statement* {prefer}
	  "stmt_"  [A-Za-z0-9\']+ "*" -> Statement* {prefer}
	  "stmts_"  [A-Za-z0-9\']+    -> Statement* {prefer}
    "met"   [0-9\']*           -> MethodDecl {prefer}
    "met_"  [A-Za-z0-9\']+     -> MethodDecl {prefer}
 	  "met"   [0-9\']* "*"       -> MethodDecl* {prefer}
	  "met_"  [A-Za-z0-9\']+ "*" -> MethodDecl* {prefer}
	  "x_" [A-Za-z0-9\']+        -> ID {prefer}
	  "prop_" [A-Za-z0-9\']+     -> ObjectProperty { prefer }
	  "prop_" [A-Za-z0-9\']+ "*"    -> {ObjectProperty ","}* { prefer }
	
  context-free restrictions
    ID -/- [\_a-zA-Z0-9\']
	
	