module js/Expression

imports

  js/Common
  js/Statement
  
sorts
    CondMid
  
context-free syntax

  Expression = < ( <Expression> ) > {bracket}

  Expression.Property = <<Expression>.<ID>> {left}
  Expression.Index = <<Expression>[<Expression>]> {left}
  Expression.New = <new <Expression>(<Expression*>)> {non-assoc}
  Expression.Call = <<Expression>(<{Expression ","}*>)> {left}
  
  Expression.PostfixIncrement = <<Expression>++> {non-assoc}
  Expression.PostfixDecrement = <<Expression>--> {non-assoc}
  
  Expression.Not =<!<Expression>> {right}
  Expression.BitwiseNot = <~<Expression>> {right}
  Expression.Plus = <+<Expression>> {right}
  Expression.Negate = <-<Expression>> {right}
  Expression.PrefixIncrement = <++<Expression>> {right}
  Expression.PrefixDecrement = <--<Expression>> {right}
  Expression.TypeOf = <typeof <Expression>> {right}
  Expression.Void = <void <Expression>> {right}
  Expression.Delete = <delete <Expression>> {right}
  
  Expression.Exponentiation = <<Expression> ** <Expression>> {right}
  
  Expression.Multiplication = <<Expression> * <Expression>> {left}
  Expression.Division = <<Expression> / <Expression>> {left}
  Expression.Modulo = <<Expression> % <Expression>> {left}
  
  Expression.Addition = <<Expression> + <Expression>> {left}
  Expression.Substraction = <<Expression> - <Expression>> {left}
  
  Expression.LeftShit = [[Expression] << [Expression]] {left}
  Expression.RightShift = [[Expression] >> [Expression]] {left}
  Expression.URightShift = [[Expression] >>> [Expression]] {left}
  
  Expression.LessThan = [[Expression] < [Expression]] {left}
  Expression.LessThanEquals = [[Expression] <= [Expression]] {left}
  Expression.GreaterThan = [[Expression] > [Expression]] {left}
  Expression.GreaterThanEquals = [[Expression] >= [Expression]] {left}
  Expression.In = [[Expression] in [Expression]] {left}
  Expression.InstanceOf = [[Expression] instanceof [Expression]] {left}
  
  Expression.Equals = <<Expression> == <Expression>> {left}
  Expression.NotEquals = <<Expression> != <Expression>> {left}
  Expression.EqualsStrict = <<Expression> === <Expression>> {left}
  Expression.NotEqualsStrict = <<Expression> !== <Expression>> {left}
  
  Expression.BitwiseAnd = <<Expression> & <Expression>> {left}
  
  Expression.BitwiseXOR = <<Expression> ^ <Expression>> {left}
  
  Expression.BitwiseOr = <<Expression> | <Expression>> {left}
  
  Expression.And = [[Expression] && [Expression]] {left}
  
  Expression.Or = [[Expression] || [Expression]] {left}
  
  Expression.Cond = <<Expression> <CondMid> <Expression>> {right}
  CondMid.CondMid = <? <Expression> :>
  
  Expression.IntegerLiteral = INT 
  Expression.FloatLiteral = FLOAT 
  Expression.True = <true> 
  Expression.False = <false>
  Expression.Null = <null>
  Expression.Undefined = <undefined>
  Expression.Identifier = ID
  Expression.String = STRING
  Expression.This = <this>
  
  
  Expression.FunctionExpression =
    <function <ID?>(<{ID ","}*>) {
        <{Statement "\n"}*>
    }>
  
  
  
  Expression.ObjectLiteral = 
<{
  <{ObjectProperty ",\n"}*>
}>

  ObjectProperty.PropertyFromVariable = ID  
  ObjectProperty.ObjectProperty = <<Expression> : <Expression>>
  
  Expression.ArrayLiteral = <[<{Expression ","}*>]>
  
  Expression.Lambda = [[LambdaParameters] => [Expression]]
  Expression.LambdaBlock = [[LambdaParameters] => [BlockStatement]] {prefer}
  
  LambdaParameters.LambdaParameters = <(<{ID ","}*>)>
  LambdaParameters.SingleParameter = ID
  
context-free priorities

//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
{ left:
	Expression.Property
	Expression.Index
	Expression.New
	Expression.Call
} > 
{ right:
  Expression.Not
  Expression.BitwiseNot
  Expression.Plus
  Expression.Negate
  Expression.PrefixIncrement
  Expression.PrefixDecrement
  Expression.TypeOf
  Expression.Void
  Expression.Delete
} >
{ right:
  Expression.Exponentiation
} >
{ left:
	Expression.Multiplication
	Expression.Division
	Expression.Modulo
} >
{ left:
	Expression.Addition
	Expression.Substraction	
} >
{ left:
	Expression.LessThan
	Expression.LessThanEquals
	Expression.GreaterThan
	Expression.GreaterThanEquals
	Expression.In
	Expression.InstanceOf
} >
{ left:
  Expression.Equals
  Expression.NotEquals
  Expression.EqualsStrict
  Expression.NotEqualsStrict
} >
{ left:
  Expression.BitwiseAnd
} >
{ left:
  Expression.BitwiseXOR
} >
{ left:
  Expression.BitwiseOr
} >
{ left:
	Expression.And	
} >
{ left:
	Expression.Or	
} >
{ right:
    Expression.Cond
} >
{ left:
	Statement.DeclarationStatement
} > Expression.FunctionExpression > Expression.Lambda