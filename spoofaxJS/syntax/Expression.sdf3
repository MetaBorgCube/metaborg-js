module Expression

imports

  Common
  Parameter
  Statement
  
context-free syntax
  Expression.Parenthesised = <(<Expression>)>
  Expression.Property = <<Expression>.<ID>> {left}
  Expression.Call = <<Expression>(<{Expression ","}*>)> {left}
  Expression.IntegerLiteral = <<INT>> {non-assoc}
  Expression.FloatLiteral = <<FLOAT>> {non-assoc}
  Expression.True = <true> {non-assoc}
  Expression.False = <false> {non-assoc}
  Expression.Null = <null> {non-assoc}
  Expression.Undefined = <undefined> {non-assoc}
  Expression.Identifier = <<ID>> {non-assoc}
  Expression.String = <<STRING>> {non-assoc}
  Expression.Addition = <<Expression> + <Expression>> {left}
  Expression.Substraction = <<Expression> - <Expression>> {left}
  Expression.Multiplication = <<Expression> * <Expression>> {left}
  Expression.Division = <<Expression> / <Expression>> {left}
  Expression.Greater = [[Expression] > [Expression]] {left}
  Expression.Lower = [[Expression] < [Expression]] {left}
  Expression.GreaterEquals = [[Expression] >= [Expression]] {left}
  Expression.LowerEquals = [[Expression] <= [Expression]] {left}
  Expression.And = [[Expression] && [Expression]] {left}
  Expression.Or = [[Expression] || [Expression]] {left}
  Expression.AnonFunction= <function(<{Parameter ","}*>) {
  		<{Statement "\n"}*>
	}>
  Expression.Object = <{<{KeyValue ","}*>}>
  KeyValue.KeyValue = <<ID>:<Expression>>
  KeyValue.KeyValue = <"<ID>":<Expression>>
  Expression.Array = <<Expression>[<{Expression ","}*>]>
  
  Expression.ArrayLiteral = <[<{Expression ","}*>]>
  
context-free priorities
{ left:
	Expression.Call
} > 
{ left:
	Expression.Multiplication
	Expression.Division
} >
{ left:
	Expression.Addition
	Expression.Substraction	
} >
{ left:
	Expression.Greater
	Expression.Lower
	Expression.GreaterEquals
	Expression.LowerEquals
} >
{ left:
	Expression.And	
} >
{ left:
	Expression.Or	
} >
{ left:
	Statement.assignment
}