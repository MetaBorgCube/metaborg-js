module Statement

imports
  Common
  Expression
  Import
  Export
  Class
  Assignment
  
context-free syntax
  BlockStatement.BlockStatement = 
    <{
      <Statement*>
    }>
    
  Statement = BlockStatement 
  Statement.ExpStmt = <<Expression>;> { prefer }
  Statement.Assignment = <<Expression> = <Expression>;>
  Statement.For = 
	<for (<Declaration> <Expression> ; <Expression>) {
	  <Statement*>
	}>
  Statement.While = 
  	<while (<Expression>) {
      <Statement*>
	}>
	
	
  Statement.If      = <if(<Expression>) <Statement>> {prefer}
  Statement.IfElse  = <if(<Expression>) <Statement> else <Statement>>
  
  
  Statement.Return = <return <Expression>;>
  Statement = Import
  Statement = Export
  Statement = Declaration
  Statement = ClassDeclaration
  
  
  Declaration.VarDeclaration = <var <LeftHandSideExpression> = <Expression>;>
  Declaration.ConstDeclaration = <const <LeftHandSideExpression> = <Expression>;>
  Declaration.LetDeclaration = <let <LeftHandSideExpression> = <Expression>;>
  Declaration = HoistableDeclaration 

  HoistableDeclaration = FunctionDeclaration
//  HoistableDeclaration = GeneratorDeclaration
  
  FunctionDeclaration.FunctionDeclaration =
    <function <ID>(<{LeftHandSideExpression ","}*>) {
      <{Statement "\n"}*>
    }>
  
context-free priorities
  Statement.IfElse <4>.> Statement.If
  